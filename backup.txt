def send_mpv_command(command):
    """Sends a JSON command to the MPV socket."""
    try:
        with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client:
            client.connect(MPV_SOCKET)
            client.sendall(json.dumps(command).encode() + b"\n")
            response = client.recv(1024)
            return json.loads(response)  # Ensure JSON response is parsed
    except Exception as e:
        print(f"Error: {e}")
        return None

def stop_audio():
    """Stops audio playback."""
    command = {"command": ["stop"]}
    return send_mpv_command(command)

def unpause_audio():
    """Ensures MPV is not paused."""
    command = {"command": ["set_property", "pause", False]}
    return send_mpv_command(command)

def is_playing():
    """Checks if MPV is actively playing audio."""
    command = {"command": ["get_property", "playback-time"]}
    response = send_mpv_command(command)
    if response and "data" in response and isinstance(response["data"], (int, float)) and response["data"] > 0:
        return True
    return False

def play_audio(file_path):
    """Plays an audio file once and ensures playback starts."""
    stop_audio()  # Stop any previous audio
    abs_file_path = os.path.abspath(file_path)  # Get absolute path
    print(f"Trying to play: {abs_file_path}")
    
    send_mpv_command({"command": ["playlist-clear"]})  # Clear previous playlist
    time.sleep(0.1)
    
    # Ensure no loop is applied
    send_mpv_command({"command": ["set_property", "loop", "no"]})

    command = {"command": ["loadfile", abs_file_path, "replace"]}
    response = send_mpv_command(command)
    print(f"MPV Response: {response}")
    
    time.sleep(0.2)  # Let MPV process
    unpause_audio()  # Ensure MPV is not paused
    
    for _ in range(20):  # Try for up to 2 seconds
        time.sleep(0.1)
        status = send_mpv_command({"command": ["get_property", "playback-time"]})
        print(f"MPV Playback Status: {status}")
        if status and "data" in status and isinstance(status["data"], (int, float)) and status["data"] > 0:
            print("✅ Audio is now playing.")
            return True
        print("🔄 Waiting for MPV to start...")  # Debugging output
    
    print("⚠️ Warning: MPV did not start playback.")
    return False

def loop_audio(file_path):
    """Loops an audio file until stopped."""
    stop_audio()  # Ensure no other audio is playing
    abs_file_path = os.path.abspath(file_path)  # Get absolute path
    print(f"🔄 Looping audio: {abs_file_path}")
    
    send_mpv_command({"command": ["playlist-clear"]})  # Clear previous playlist
    time.sleep(0.1)
    
    command = {"command": ["loadfile", abs_file_path, "replace"]}
    response = send_mpv_command(command)
    print(f"MPV Response: {response}")
    
    time.sleep(0.2)  # Allow MPV to process
    send_mpv_command({"command": ["set_property", "loop", "inf"]})  # Enable infinite looping
    unpause_audio()  # Ensure MPV is not paused
    
    return response